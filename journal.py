# -*- coding: utf-8 -*-
from flask import Flask
import os
import psycopg2
from contextlib import closing
from flask import g
import datetime
from flask import render_template
from flask import abort
from flask import request
from flask import url_for
from flask import redirect
from flask import session
from flask import jsonify
from passlib.hash import pbkdf2_sha256
import markdown

DB_SCHEMA = """
DROP TABLE IF EXISTS entries;
CREATE TABLE entries (
    id serial PRIMARY KEY,
    title VARCHAR (127) NOT NULL,
    text TEXT NOT NULL,
    created TIMESTAMP NOT NULL
    )
"""
app = Flask(__name__)
app.config['DATABASE'] = os.environ.get(
    'DATABASE_URL', 'dbname=learning_journal'
)
app.config['ADMIN_USERNAME'] = os.environ.get(
    'ADMIN_USERNAME', 'admin'
)
app.config['ADMIN_PASSWORD'] = os.environ.get(
    'ADMIN_PASSWORD', pbkdf2_sha256.encrypt('admin')
)
app.config['SECRET_KEY'] = os.environ.get(
    'FLASK_SECRET_KEY', 'lkajfekjwhgkwejhflkdjsfhlja'
)

DB_ENTRY_INSERT = """
INSERT INTO entries (title, text, created) VALUES (%s, %s, %s)
"""
DB_ENTRIES_LIST = """
SELECT id, title, text, created FROM entries ORDER BY created DESC
"""

# This is new as of Editing
DB_ENTRY_GET = """
SELECT * FROM entries WHERE id = %s
"""

# This is new as of Editing
DB_ENTRY_EDIT = """
UPDATE entries
SET title = %s, text = %s, created = %s
WHERE id = %s
"""

DB_GET_LAST_ENTRY_ID = """
SELECT MAX(id) FROM entries
"""


# This is new as of Editing
def _markdown(text):
    return markdown.markdown(text, extensions=["codehilite"])


# This is new as of Editing
@app.route('/edit/<int:post_id>', methods=['GET', 'POST'])
def edit_post(post_id):
    if not post_id or 'logged_in' not in session or \
        session['logged_in'] is False:
            return redirect(url_for('show_entries'))
    entry = get_entry(post_id)
    if request.method == 'POST' and entry is not None:
        try:
            edit_entry(post_id, request.form['title'], request.form['text'])
            return redirect(url_for('show_entries'))
        except psycopg2.Error:
            abort(500)
    return render_template('edit_entry.html', entry=entry)


# New for Twitter
@app.route('/view/<int:post_id>', methods=['GET'])
def view_post(post_id):
    entry = get_entry(post_id)
    if entry is not None:
        # reuse the show_entries view
        return show_entries([entry])
    else:
        abort(404)

    return redirect(url_for('show_entries'))


# This is new as of Editing
def get_entry(post_id):
    con = get_database_connection()
    cur = con.cursor()
    cur.execute(DB_ENTRY_GET, (post_id,))
    keys = ('id', 'title', 'text', 'created')
    try:
        fetched = cur.fetchall()[0]
    except IndexError:
        return None
    entry = {keys[i]: fetched[i] for i in xrange(len(keys))}
    entry['html'] = _markdown(entry['text'])
    return entry


# This is new as of Editing
def edit_entry(post_id, title, text):
    if not title or not text:
        raise ValueError("Title and text required for writing an entry")
    con = get_database_connection()
    cur = con.cursor()
    now = datetime.datetime.utcnow()
    cur.execute(DB_ENTRY_EDIT, (title, text, now, post_id))


@app.route('/add', methods=['POST'])
def add_entry():
    try:
        write_entry(request.form['title'], request.form['text'])
    except psycopg2.Error:
        # this will catch any errors generated by the database
        abort(500)
    # return redirect(url_for('show_entries'))
    post_id = get_last_entry_id()
    entry = get_entry(post_id)
    return jsonify(
        title=entry['title'],
        text=entry['text'],
        created=entry['created']
        )
    # return entry


def get_last_entry_id():
    con = get_database_connection()
    cur = con.cursor()
    cur.execute(DB_GET_LAST_ENTRY_ID)
    return cur.fetchall()[0][0]


def get_all_entries():
    """return a list of all entries as dicts"""
    con = get_database_connection()
    cur = con.cursor()
    cur.execute(DB_ENTRIES_LIST)
    keys = ('id', 'title', 'text', 'created')
    return [dict(zip(keys, row)) for row in cur.fetchall()]


def connect_db():
    """Return a connection to the configured database"""
    return psycopg2.connect(app.config['DATABASE'])


def init_db():
    """initialize the database using DB_SCHEMA

    WARNING: executing this function will drop existing tables.
    """
    with closing(connect_db()) as db:
        db.cursor().execute(DB_SCHEMA)
        db.commit()


def get_database_connection():
    db = getattr(g, 'db', None)
    if db is None:
        g.db = db = connect_db()
    return db


@app.teardown_request
def teardown_request(exception):
    db = getattr(g, 'db', None)
    if db is not None:
        if exception and isinstance(exception, psycopg2.Error):
            # if there was a problem with the database, rollback any
            # existing transaction
            db.rollback()
        else:
            # otherwise, commit
            db.commit()
        db.close()


def write_entry(title, text):
    if not title or not text:
        raise ValueError("Title and text required for writing an entry")
    con = get_database_connection()
    cur = con.cursor()
    now = datetime.datetime.utcnow()
    cur.execute(DB_ENTRY_INSERT, [title, text, now])


# edited for Twitter so urls to individual entries can be shared
@app.route('/')
def show_entries(entries=None):
    if entries is None:
        entries = get_all_entries()
    for entry in entries:
        entry['text'] = _markdown(entry['text'])  # markdown -> html
    return render_template('list_entries.html', entries=entries)


@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        try:
            do_login(
                request.form['username'].encode('utf-8'),
                request.form['password'].encode('utf-8')
            )
        except ValueError:
            error = "Login Failed"
        else:
            return redirect(url_for('show_entries'))
    return render_template('login.html', error=error)


@app.route('/logout')
def logout():
    session.pop('logged_in', None)
    return redirect(url_for('show_entries'))


def do_login(username='', passwd=''):
    if username != app.config['ADMIN_USERNAME']:
        raise ValueError
    if not pbkdf2_sha256.verify(passwd, app.config['ADMIN_PASSWORD']):
        raise ValueError
    session['logged_in'] = True

if __name__ == '__main__':
    app.run(debug=True)
